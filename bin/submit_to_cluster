#!/usr/bin/env python
"""
"""
from stormdb.cluster import ClusterJob
from argparse import ArgumentParser
from os import environ

parser = ArgumentParser()
parser.add_argument('-n', '--n_threads', type=int,
                    default=1, help='Number of threads to run per process')
parser.add_argument('-q', '--queue', type=str, default='short.q',
                    help='Name of queue to submit to')
parser.add_argument('-m', '--h_vmem', type=str, default=None,
                    help=('Amount of virtual memory per thread to request. '
                          'Format: M=megabytes, G=gigabytes (e.g. 30G).'))
parser.add_argument('-p', '--project', type=str, default=None,
                    help='Name of project (or set MINDLABPROJ)')
parser.add_argument('-w', '--working_dir', type=str, default='cwd',
                    help='Working directory for the job (default: cwd)')
parser.add_argument('--noclean', action='store_false',
                    help='Do not clean up the qsub submission script.')
parser.add_argument('exec_cmd', type=str,
                    help='Full command to execute, in quotes (")')

args = parser.parse_args()

if args.project is None:
    try:
        proj_name = environ['MINDLABPROJ']
        if proj_name == 'NA':
            raise KeyError('Force an error')
    except KeyError:
        msg = ('You must specify a project name either by means of the '
               '--project flag or by setting the MINDLABPROJ environment '
               'variable (e.g. in your .bashrc file).')
        raise RuntimeError(msg)
else:
    proj_name = args.project
# basic check of the memory-argument
if args.h_vmem is not None:
    if (not args.h_vmem.startswith(tuple('%d' % ii for ii in range(1, 10))) or
            not args.h_vmem.upper().endswith(('M', 'G'))):
        raise ValueError('Bad memory format: {:s}'.format(args.h_vmem))

job = ClusterJob(args.exec_cmd, proj_name=proj_name, n_threads=args.n_threads,
                 cleanup=args.noclean, queue=args.queue, h_vmem=args.h_vmem,
                 working_dir=args.working_dir)
job.submit()
